Metadata-Version: 2.4
Name: mosaik
Version: 3.5.0
Summary: mosaik is a flexible smart-grid co-simulation framework
Project-URL: Homepage, https://mosaik.offis.de/
Project-URL: Repository, https://gitlab.com/mosaik/mosaik
Project-URL: Documentation, https://mosaik.readthedocs.io/
Project-URL: Discussions, https://github.com/orgs/OFFIS-mosaik/discussions
Author-email: mosaik development team <mosaik@offis.de>
License:                   GNU LESSER GENERAL PUBLIC LICENSE
                               Version 2.1, February 1999
        
         Copyright (C) 1991, 1999 Free Software Foundation, Inc.
         51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
         Everyone is permitted to copy and distribute verbatim copies
         of this license document, but changing it is not allowed.
        
        [This is the first released version of the Lesser GPL.  It also counts
         as the successor of the GNU Library Public License, version 2, hence
         the version number 2.1.]
        
                                    Preamble
        
          The licenses for most software are designed to take away your
        freedom to share and change it.  By contrast, the GNU General Public
        Licenses are intended to guarantee your freedom to share and change
        free software--to make sure the software is free for all its users.
        
          This license, the Lesser General Public License, applies to some
        specially designated software packages--typically libraries--of the
        Free Software Foundation and other authors who decide to use it.  You
        can use it too, but we suggest you first think carefully about whether
        this license or the ordinary General Public License is the better
        strategy to use in any particular case, based on the explanations below.
        
          When we speak of free software, we are referring to freedom of use,
        not price.  Our General Public Licenses are designed to make sure that
        you have the freedom to distribute copies of free software (and charge
        for this service if you wish); that you receive source code or can get
        it if you want it; that you can change the software and use pieces of
        it in new free programs; and that you are informed that you can do
        these things.
        
          To protect your rights, we need to make restrictions that forbid
        distributors to deny you these rights or to ask you to surrender these
        rights.  These restrictions translate to certain responsibilities for
        you if you distribute copies of the library or if you modify it.
        
          For example, if you distribute copies of the library, whether gratis
        or for a fee, you must give the recipients all the rights that we gave
        you.  You must make sure that they, too, receive or can get the source
        code.  If you link other code with the library, you must provide
        complete object files to the recipients, so that they can relink them
        with the library after making changes to the library and recompiling
        it.  And you must show them these terms so they know their rights.
        
          We protect your rights with a two-step method: (1) we copyright the
        library, and (2) we offer you this license, which gives you legal
        permission to copy, distribute and/or modify the library.
        
          To protect each distributor, we want to make it very clear that
        there is no warranty for the free library.  Also, if the library is
        modified by someone else and passed on, the recipients should know
        that what they have is not the original version, so that the original
        author's reputation will not be affected by problems that might be
        introduced by others.
        
        
          Finally, software patents pose a constant threat to the existence of
        any free program.  We wish to make sure that a company cannot
        effectively restrict the users of a free program by obtaining a
        restrictive license from a patent holder.  Therefore, we insist that
        any patent license obtained for a version of the library must be
        consistent with the full freedom of use specified in this license.
        
          Most GNU software, including some libraries, is covered by the
        ordinary GNU General Public License.  This license, the GNU Lesser
        General Public License, applies to certain designated libraries, and
        is quite different from the ordinary General Public License.  We use
        this license for certain libraries in order to permit linking those
        libraries into non-free programs.
        
          When a program is linked with a library, whether statically or using
        a shared library, the combination of the two is legally speaking a
        combined work, a derivative of the original library.  The ordinary
        General Public License therefore permits such linking only if the
        entire combination fits its criteria of freedom.  The Lesser General
        Public License permits more lax criteria for linking other code with
        the library.
        
          We call this license the "Lesser" General Public License because it
        does Less to protect the user's freedom than the ordinary General
        Public License.  It also provides other free software developers Less
        of an advantage over competing non-free programs.  These disadvantages
        are the reason we use the ordinary General Public License for many
        libraries.  However, the Lesser license provides advantages in certain
        special circumstances.
        
          For example, on rare occasions, there may be a special need to
        encourage the widest possible use of a certain library, so that it becomes
        a de-facto standard.  To achieve this, non-free programs must be
        allowed to use the library.  A more frequent case is that a free
        library does the same job as widely used non-free libraries.  In this
        case, there is little to gain by limiting the free library to free
        software only, so we use the Lesser General Public License.
        
          In other cases, permission to use a particular library in non-free
        programs enables a greater number of people to use a large body of
        free software.  For example, permission to use the GNU C Library in
        non-free programs enables many more people to use the whole GNU
        operating system, as well as its variant, the GNU/Linux operating
        system.
        
          Although the Lesser General Public License is Less protective of the
        users' freedom, it does ensure that the user of a program that is
        linked with the Library has the freedom and the wherewithal to run
        that program using a modified version of the Library.
        
          The precise terms and conditions for copying, distribution and
        modification follow.  Pay close attention to the difference between a
        "work based on the library" and a "work that uses the library".  The
        former contains code derived from the library, whereas the latter must
        be combined with the library in order to run.
        
        
                          GNU LESSER GENERAL PUBLIC LICENSE
           TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
        
          0. This License Agreement applies to any software library or other
        program which contains a notice placed by the copyright holder or
        other authorized party saying it may be distributed under the terms of
        this Lesser General Public License (also called "this License").
        Each licensee is addressed as "you".
        
          A "library" means a collection of software functions and/or data
        prepared so as to be conveniently linked with application programs
        (which use some of those functions and data) to form executables.
        
          The "Library", below, refers to any such software library or work
        which has been distributed under these terms.  A "work based on the
        Library" means either the Library or any derivative work under
        copyright law: that is to say, a work containing the Library or a
        portion of it, either verbatim or with modifications and/or translated
        straightforwardly into another language.  (Hereinafter, translation is
        included without limitation in the term "modification".)
        
          "Source code" for a work means the preferred form of the work for
        making modifications to it.  For a library, complete source code means
        all the source code for all modules it contains, plus any associated
        interface definition files, plus the scripts used to control compilation
        and installation of the library.
        
          Activities other than copying, distribution and modification are not
        covered by this License; they are outside its scope.  The act of
        running a program using the Library is not restricted, and output from
        such a program is covered only if its contents constitute a work based
        on the Library (independent of the use of the Library in a tool for
        writing it).  Whether that is true depends on what the Library does
        and what the program that uses the Library does.
        
          1. You may copy and distribute verbatim copies of the Library's
        complete source code as you receive it, in any medium, provided that
        you conspicuously and appropriately publish on each copy an
        appropriate copyright notice and disclaimer of warranty; keep intact
        all the notices that refer to this License and to the absence of any
        warranty; and distribute a copy of this License along with the
        Library.
        
          You may charge a fee for the physical act of transferring a copy,
        and you may at your option offer warranty protection in exchange for a
        fee.
        
        
          2. You may modify your copy or copies of the Library or any portion
        of it, thus forming a work based on the Library, and copy and
        distribute such modifications or work under the terms of Section 1
        above, provided that you also meet all of these conditions:
        
            a) The modified work must itself be a software library.
        
            b) You must cause the files modified to carry prominent notices
            stating that you changed the files and the date of any change.
        
            c) You must cause the whole of the work to be licensed at no
            charge to all third parties under the terms of this License.
        
            d) If a facility in the modified Library refers to a function or a
            table of data to be supplied by an application program that uses
            the facility, other than as an argument passed when the facility
            is invoked, then you must make a good faith effort to ensure that,
            in the event an application does not supply such function or
            table, the facility still operates, and performs whatever part of
            its purpose remains meaningful.
        
            (For example, a function in a library to compute square roots has
            a purpose that is entirely well-defined independent of the
            application.  Therefore, Subsection 2d requires that any
            application-supplied function or table used by this function must
            be optional: if the application does not supply it, the square
            root function must still compute square roots.)
        
        These requirements apply to the modified work as a whole.  If
        identifiable sections of that work are not derived from the Library,
        and can be reasonably considered independent and separate works in
        themselves, then this License, and its terms, do not apply to those
        sections when you distribute them as separate works.  But when you
        distribute the same sections as part of a whole which is a work based
        on the Library, the distribution of the whole must be on the terms of
        this License, whose permissions for other licensees extend to the
        entire whole, and thus to each and every part regardless of who wrote
        it.
        
        Thus, it is not the intent of this section to claim rights or contest
        your rights to work written entirely by you; rather, the intent is to
        exercise the right to control the distribution of derivative or
        collective works based on the Library.
        
        In addition, mere aggregation of another work not based on the Library
        with the Library (or with a work based on the Library) on a volume of
        a storage or distribution medium does not bring the other work under
        the scope of this License.
        
          3. You may opt to apply the terms of the ordinary GNU General Public
        License instead of this License to a given copy of the Library.  To do
        this, you must alter all the notices that refer to this License, so
        that they refer to the ordinary GNU General Public License, version 2,
        instead of to this License.  (If a newer version than version 2 of the
        ordinary GNU General Public License has appeared, then you can specify
        that version instead if you wish.)  Do not make any other change in
        these notices.
        
        
          Once this change is made in a given copy, it is irreversible for
        that copy, so the ordinary GNU General Public License applies to all
        subsequent copies and derivative works made from that copy.
        
          This option is useful when you wish to copy part of the code of
        the Library into a program that is not a library.
        
          4. You may copy and distribute the Library (or a portion or
        derivative of it, under Section 2) in object code or executable form
        under the terms of Sections 1 and 2 above provided that you accompany
        it with the complete corresponding machine-readable source code, which
        must be distributed under the terms of Sections 1 and 2 above on a
        medium customarily used for software interchange.
        
          If distribution of object code is made by offering access to copy
        from a designated place, then offering equivalent access to copy the
        source code from the same place satisfies the requirement to
        distribute the source code, even though third parties are not
        compelled to copy the source along with the object code.
        
          5. A program that contains no derivative of any portion of the
        Library, but is designed to work with the Library by being compiled or
        linked with it, is called a "work that uses the Library".  Such a
        work, in isolation, is not a derivative work of the Library, and
        therefore falls outside the scope of this License.
        
          However, linking a "work that uses the Library" with the Library
        creates an executable that is a derivative of the Library (because it
        contains portions of the Library), rather than a "work that uses the
        library".  The executable is therefore covered by this License.
        Section 6 states terms for distribution of such executables.
        
          When a "work that uses the Library" uses material from a header file
        that is part of the Library, the object code for the work may be a
        derivative work of the Library even though the source code is not.
        Whether this is true is especially significant if the work can be
        linked without the Library, or if the work is itself a library.  The
        threshold for this to be true is not precisely defined by law.
        
          If such an object file uses only numerical parameters, data
        structure layouts and accessors, and small macros and small inline
        functions (ten lines or less in length), then the use of the object
        file is unrestricted, regardless of whether it is legally a derivative
        work.  (Executables containing this object code plus portions of the
        Library will still fall under Section 6.)
        
          Otherwise, if the work is a derivative of the Library, you may
        distribute the object code for the work under the terms of Section 6.
        Any executables containing that work also fall under Section 6,
        whether or not they are linked directly with the Library itself.
        
        
          6. As an exception to the Sections above, you may also combine or
        link a "work that uses the Library" with the Library to produce a
        work containing portions of the Library, and distribute that work
        under terms of your choice, provided that the terms permit
        modification of the work for the customer's own use and reverse
        engineering for debugging such modifications.
        
          You must give prominent notice with each copy of the work that the
        Library is used in it and that the Library and its use are covered by
        this License.  You must supply a copy of this License.  If the work
        during execution displays copyright notices, you must include the
        copyright notice for the Library among them, as well as a reference
        directing the user to the copy of this License.  Also, you must do one
        of these things:
        
            a) Accompany the work with the complete corresponding
            machine-readable source code for the Library including whatever
            changes were used in the work (which must be distributed under
            Sections 1 and 2 above); and, if the work is an executable linked
            with the Library, with the complete machine-readable "work that
            uses the Library", as object code and/or source code, so that the
            user can modify the Library and then relink to produce a modified
            executable containing the modified Library.  (It is understood
            that the user who changes the contents of definitions files in the
            Library will not necessarily be able to recompile the application
            to use the modified definitions.)
        
            b) Use a suitable shared library mechanism for linking with the
            Library.  A suitable mechanism is one that (1) uses at run time a
            copy of the library already present on the user's computer system,
            rather than copying library functions into the executable, and (2)
            will operate properly with a modified version of the library, if
            the user installs one, as long as the modified version is
            interface-compatible with the version that the work was made with.
        
            c) Accompany the work with a written offer, valid for at
            least three years, to give the same user the materials
            specified in Subsection 6a, above, for a charge no more
            than the cost of performing this distribution.
        
            d) If distribution of the work is made by offering access to copy
            from a designated place, offer equivalent access to copy the above
            specified materials from the same place.
        
            e) Verify that the user has already received a copy of these
            materials or that you have already sent this user a copy.
        
          For an executable, the required form of the "work that uses the
        Library" must include any data and utility programs needed for
        reproducing the executable from it.  However, as a special exception,
        the materials to be distributed need not include anything that is
        normally distributed (in either source or binary form) with the major
        components (compiler, kernel, and so on) of the operating system on
        which the executable runs, unless that component itself accompanies
        the executable.
        
          It may happen that this requirement contradicts the license
        restrictions of other proprietary libraries that do not normally
        accompany the operating system.  Such a contradiction means you cannot
        use both them and the Library together in an executable that you
        distribute.
        
        
          7. You may place library facilities that are a work based on the
        Library side-by-side in a single library together with other library
        facilities not covered by this License, and distribute such a combined
        library, provided that the separate distribution of the work based on
        the Library and of the other library facilities is otherwise
        permitted, and provided that you do these two things:
        
            a) Accompany the combined library with a copy of the same work
            based on the Library, uncombined with any other library
            facilities.  This must be distributed under the terms of the
            Sections above.
        
            b) Give prominent notice with the combined library of the fact
            that part of it is a work based on the Library, and explaining
            where to find the accompanying uncombined form of the same work.
        
          8. You may not copy, modify, sublicense, link with, or distribute
        the Library except as expressly provided under this License.  Any
        attempt otherwise to copy, modify, sublicense, link with, or
        distribute the Library is void, and will automatically terminate your
        rights under this License.  However, parties who have received copies,
        or rights, from you under this License will not have their licenses
        terminated so long as such parties remain in full compliance.
        
          9. You are not required to accept this License, since you have not
        signed it.  However, nothing else grants you permission to modify or
        distribute the Library or its derivative works.  These actions are
        prohibited by law if you do not accept this License.  Therefore, by
        modifying or distributing the Library (or any work based on the
        Library), you indicate your acceptance of this License to do so, and
        all its terms and conditions for copying, distributing or modifying
        the Library or works based on it.
        
          10. Each time you redistribute the Library (or any work based on the
        Library), the recipient automatically receives a license from the
        original licensor to copy, distribute, link with or modify the Library
        subject to these terms and conditions.  You may not impose any further
        restrictions on the recipients' exercise of the rights granted herein.
        You are not responsible for enforcing compliance by third parties with
        this License.
        
        
          11. If, as a consequence of a court judgment or allegation of patent
        infringement or for any other reason (not limited to patent issues),
        conditions are imposed on you (whether by court order, agreement or
        otherwise) that contradict the conditions of this License, they do not
        excuse you from the conditions of this License.  If you cannot
        distribute so as to satisfy simultaneously your obligations under this
        License and any other pertinent obligations, then as a consequence you
        may not distribute the Library at all.  For example, if a patent
        license would not permit royalty-free redistribution of the Library by
        all those who receive copies directly or indirectly through you, then
        the only way you could satisfy both it and this License would be to
        refrain entirely from distribution of the Library.
        
        If any portion of this section is held invalid or unenforceable under any
        particular circumstance, the balance of the section is intended to apply,
        and the section as a whole is intended to apply in other circumstances.
        
        It is not the purpose of this section to induce you to infringe any
        patents or other property right claims or to contest validity of any
        such claims; this section has the sole purpose of protecting the
        integrity of the free software distribution system which is
        implemented by public license practices.  Many people have made
        generous contributions to the wide range of software distributed
        through that system in reliance on consistent application of that
        system; it is up to the author/donor to decide if he or she is willing
        to distribute software through any other system and a licensee cannot
        impose that choice.
        
        This section is intended to make thoroughly clear what is believed to
        be a consequence of the rest of this License.
        
          12. If the distribution and/or use of the Library is restricted in
        certain countries either by patents or by copyrighted interfaces, the
        original copyright holder who places the Library under this License may add
        an explicit geographical distribution limitation excluding those countries,
        so that distribution is permitted only in or among countries not thus
        excluded.  In such case, this License incorporates the limitation as if
        written in the body of this License.
        
          13. The Free Software Foundation may publish revised and/or new
        versions of the Lesser General Public License from time to time.
        Such new versions will be similar in spirit to the present version,
        but may differ in detail to address new problems or concerns.
        
        Each version is given a distinguishing version number.  If the Library
        specifies a version number of this License which applies to it and
        "any later version", you have the option of following the terms and
        conditions either of that version or of any later version published by
        the Free Software Foundation.  If the Library does not specify a
        license version number, you may choose any version ever published by
        the Free Software Foundation.
        
        
          14. If you wish to incorporate parts of the Library into other free
        programs whose distribution conditions are incompatible with these,
        write to the author to ask for permission.  For software which is
        copyrighted by the Free Software Foundation, write to the Free
        Software Foundation; we sometimes make exceptions for this.  Our
        decision will be guided by the two goals of preserving the free status
        of all derivatives of our free software and of promoting the sharing
        and reuse of software generally.
        
                                    NO WARRANTY
        
          15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
        WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
        EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
        OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
        KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
        LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
        THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
        
          16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
        WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
        AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
        FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
        CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
        LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
        RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
        FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
        SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
        DAMAGES.
License-File: AUTHORS.rst
License-File: LICENSE.txt
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Science/Research
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Requires-Dist: loguru>=0.6
Requires-Dist: mosaik-api-v3>=3.0.13
Requires-Dist: networkx>=2.5
Requires-Dist: tqdm>=4.66.4
Requires-Dist: typing-extensions>=4.11.0
Description-Content-Type: text/x-rst

Mosaik
======

Mosaik is a simulation compositor for Smart Grid simulations.

It lets you re-use existing simulators and couple them to simulate large-scale
Smart Grid scenarios. Mosaik offers powerful mechanisms to specify and compose
these scenarios.

License: LGPL

Example
-------

A simple demo scenario with mosaik:

.. code-block:: python

    >>> import mosaik
    >>> sim_config = {
    ...   'ExampleSim': {'python': 'example_sim.mosaik:ExampleSim'},
    ... }
    >>> def create_scenario(world):
    ...   sim_1 = world.start('ExampleSim')
    ...   sim_2 = world.start('ExampleSim')
    ...   a_set = [sim_1.A(init_val=0) for i in range(3)]
    ...   b_set = sim_2.B.create(2, init_val=0)
    ...   for i, j in zip(a_set, b_set):
    ...     world.connect(i, j, ('val_out', 'val_in'))
    ...
    >>> world = mosaik.World(sim_config)
    >>> create_scenario(world)
    2022-11-21 15:39:48.554 | INFO     | mosaik.scenario:start:255 - Starting "ExampleSim" as "ExampleSim-0" ...
    2022-11-21 15:39:48.555 | INFO     | mosaik.scenario:start:255 - Starting "ExampleSim" as "ExampleSim-1" ...
    >>> world.run(until=2)
    2022-11-21 15:40:05.187 | INFO     | mosaik.scenario:run:532 - Starting simulation.
    100%|█████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 539.56steps/s]
    2022-11-21 15:40:05.193 | INFO     | mosaik.scenario:run:576 - Simulation finished successfully.


Installation
------------

Mosaik requires Python >= 3.8. Use `pip`__ to install it, preferably into
a `virtualenv`__::

    $ pip install mosaik

__ http://pip.readthedocs.org/en/latest/installing.html
__ http://virtualenv.readthedocs.org/en/latest/

Documentation, Source Code and Issues
-------------------------------------

The documentation is available at https://mosaik.readthedocs.io.

Please report bugs and ideas for improvement to our `issue tracker`__.

__ https://gitlab.com/mosaik/mosaik/-/issues

How to cite mosaik
------------------
If you want to cite mosaik, e.g. in a work in which you use mosaik, you can use this publication::

    C. Steinbrink, M. Blank-Babazadeh, A. El-Ama, S. Holly, B. Lüers, M. Nebel-Wenner, R.P. Ramirez Acosta, T. Raub, J.S. Schwarz, S. Stark, A. Nieße, and S. Lehnhoff, “CPES Testing with mosaik: Co-Simulation Planning, Execution and Analysis”, Applied Sciences, vol. 9, no. 5, 2019.

Or as bibtex::

    @Article{app9050923,
        AUTHOR = {Steinbrink, Cornelius and Blank-Babazadeh, Marita and El-Ama, André and Holly, Stefanie and Lüers, Bengt and Nebel-Wenner, Marvin and Ramírez Acosta, Rebeca P. and Raub, Thomas and Schwarz, Jan Sören and Stark, Sanja and Nieße, Astrid and Lehnhoff, Sebastian},
        TITLE = {CPES Testing with mosaik: Co-Simulation Planning, Execution and Analysis},
        JOURNAL = {Applied Sciences},
        VOLUME = {9},
        YEAR = {2019},
        NUMBER = {5},
        ARTICLE-NUMBER = {923},
        URL = {https://www.mdpi.com/2076-3417/9/5/923},
        ISSN = {2076-3417},
        DOI = {10.3390/app9050923}
    }

Get in touch, ask questions, discuss 💬
---------------------------------------
You have a question, a feature request or want to generally discuss the amazing
possibilities with co-simulation and mosaik? We are curious to hear from you!
Join us on `GitHub Discussions <https://github.com/orgs/OFFIS-mosaik/discussions>`_.


Changelog
=========

3.5.0 - 2025-03-17
------------------

- [NEW] Transform functions to allow unit conversions between simulators (`#109 <https://gitlab.com/mosaik/mosaik/-/issues/109>`_, `docs <https://mosaik.readthedocs.io/en/3.5.0/how-tos/transform-functions.html>`__)
- [NEW] Reworked tutorial and documentation (`#222 <https://gitlab.com/mosaik/mosaik/-/issues/222>`_, `live version <https://mosaik.readthedocs.io/en/3.5.0/>`__)
- [NEW] Pause and resume simulations (`#220 <https://gitlab.com/mosaik/mosaik/-/issues/220>`_, `docs <https://mosaik.readthedocs.io/en/3.5.0/how-tos/pause-resume.html>`__)
- [NEW] Simulator groups can be named (`#272 <https://gitlab.com/mosaik/mosaik/-/issues/272>`_)
- [NEW] Warning on invalid entity IDs in ``get_data`` result (`#253 <https://gitlab.com/mosaik/mosaik/-/issues/253>`_)
- [FIX] Regression in dataflow graphing due to tiered times (`#258 <https://gitlab.com/mosaik/mosaik/-/issues/258>`_)
- [FIX] Race condition in real-time simulator start (`#268 <https://gitlab.com/mosaik/mosaik/-/issues/268>`_)

3.4.0 - 2024-12-13
------------------

- [NEW] Use AsyncWorld for better integration in other programs (`#243 <https://gitlab.com/mosaik/mosaik/-/issues/243>`_)
- [NEW] Better entity rendering (`#257 <https://gitlab.com/mosaik/mosaik/-/issues/257>`_)
- [NEW] Save the Popen instance when starting a simulator using cmd (`#256 <https://gitlab.com/mosaik/mosaik/-/issues/256>`_)
- [FIX] Mosaik does not recognize if entity IDs differ from one another (`#194 <https://gitlab.com/mosaik/mosaik/-/issues/194>`_)
- [FIX] Incorrect shortest duration calculation (`#246 <https://gitlab.com/mosaik/mosaik/-/issues/246>`_)

3.3.3 - 2024-05-21
------------------

- [NEW] mosaik greeting with ASCII art and version information, contact links (`#216 <https://gitlab.com/mosaik/mosaik/-/issues/216>`_)
- [NEW] Better error messages on remote errors (`#234 <https://gitlab.com/mosaik/mosaik/-/issues/234>`_)
- [FIX] Error message for serialization errors assigns blame correctly (`#232 <https://gitlab.com/mosaik/mosaik/-/issues/232>`_)

3.3.2 - 2024-04-12
------------------

- [FIX] Fix versioning issue

3.3.1 - 2024-04-12
------------------

- [FIX] Remote simulators didn't work with Python 3.12 (`#233 <https://gitlab.com/mosaik/mosaik/-/issues/233>`_)

3.3.0 - 2024-04-08
------------------
- [NEW] A simulator can now be connected to itself if the connection is weak or time_shifted (`#156 <https://gitlab.com/mosaik/mosaik/-/issues/156>`_)
- [NEW] mosaik now provides a couple of basic simulators (`#192 <https://gitlab.com/mosaik/mosaik/-/issues/192>`_ , `docs <https://mosaik.readthedocs.io/en/latest/ecosystem/index.html#mosaik-basic-simulators>`_)
- [NEW] Simulators can return extra_info for their entities to be used in scenario script (`#197 <https://gitlab.com/mosaik/mosaik/-/issues/197>`_)
- [NEW] Simulators now can (and potentially must) be grouped in a scenario script for more fine-grained control over same-time loops (`#215 <https://gitlab.com/mosaik/mosaik/-/issues/215>`_)
- [IMPROVEMENT] Internal rework and refactoring of the time handling in mosaik (`#162 <https://gitlab.com/mosaik/mosaik/-/issues/162>`_)


3.2.0 - 2023-08-31
------------------
- [NEW] Visualizations for the simulation debug information (`#173 <https://gitlab.com/mosaik/mosaik/-/issues/173>`_)
- [NEW] Allow to open a new console for simulator (`#84 <https://gitlab.com/mosaik/mosaik/-/issues/84>`_)
- [FIX] Lift restriction of only one weak connection per cycle (`#151 <https://gitlab.com/mosaik/mosaik/-/issues/151>`_)
- [FIX] Incorrect triggering when adding several edges (`#92 <https://gitlab.com/mosaik/mosaik/-/issues/92>`_)
- [IMPROVEMENT] Switch from simpy to asycnio (`#103 <https://gitlab.com/mosaik/mosaik/-/issues/103>`_)
- [CHANGE] Removed support for Python 3.7, added support for Python 3.11 (`#171 <https://gitlab.com/mosaik/mosaik/-/issues/171>`_)

3.1.1 - 2023-01-11
------------------

- [FIX] Fix compatibilty with mosaik 2 simulators (`#152 <https://gitlab.com/mosaik/mosaik/-/issues/152>`_)

3.1.0 - 2022-11-23
------------------
- [NEW] Add progress bar to visualize simulation progress (`!58 <https://gitlab.com/mosaik/mosaik/-/merge_requests/58>`_)
- [NEW] Add type annotations (`#107 <https://gitlab.com/mosaik/mosaik/-/issues/107>`_)
- [NEW] Add proper logging (`#98 <https://gitlab.com/mosaik/mosaik/-/issues/98>`_)
- [DEPRECATED] Deprecated tags for set_data und async_requests (`#102 <https://gitlab.com/mosaik/mosaik/-/issues/102>`_)
- [CHANGE] Improved benchmarks with new result table (`#94 <https://gitlab.com/mosaik/mosaik/-/issues/94>`_)
- [FIX] Unexpected behavior of (time-based) simulators whose output is not used anymore (`#90 <https://gitlab.com/mosaik/mosaik/-/issues/90>`_)
- [FIX] Lazy stepping does not work (`#89 <https://gitlab.com/mosaik/mosaik/-/issues/89>`_)
- [FIX] Negative max_advance values in same time loop (`#82 <https://gitlab.com/mosaik/mosaik/-/issues/82>`_)
- [FIX] Initial data for time-shifted connection for hybrid simulator (`#81 <https://gitlab.com/mosaik/mosaik/-/issues/81>`_)
- [FIX] Bug related to None value for "dest_sim.next_step" in particular connection structure (`#80 <https://gitlab.com/mosaik/mosaik/-/issues/80>`_)

3.0.2 - 2022-06-01
------------------

- [CHANGE] Updated mosaik-api version to 3.0.2

3.0.1 - 2022-05-02
------------------

- [CHANGE] Set external events via highlevel function call
- [FIX] Allow PATCH version to be included in the mosaik-api version format

3.0.0 - 2021-06-07
------------------

- This is a major upgrade to improve the discrete-event capabilities. Simulators' steps
  can now also be triggered by the output of other simulators.

- [NEW] Native support of discrete-event simulations
- [NEW] A global time resolution can be set for the scenario.
- [NEW] Simulators can request steps asynchronously via *set_event()* to react to external events.
- [NEW] Ability to specify output data as non-persistent (i.e. transient)
- [CHANGE] New api 3:
  - Simulators have now a *type* ('time-based'|'event-based'|'hybrid').
  - *time_resolution* is passed as argument of the *init* function.
  - *max_advance* is passed as argument of the *step* function.
- [CHANGE] Update of the documentation

2.6.1 - 2021-06-04
------------------

- [CHANGE] Updated ReadTheDocs to support versioning
- [CHANGE] Updated setup: mosaik-api>=2.3,<3
- [CHANGE] Updated networkx version to 2.5

2.6.0 - 2020-05-08
------------------

- [NEW] The print of the simulation progress is now optional and can be disabled via a flag
  world.run(END, print_progress=False).
- [NEW] Additional starters can now be added via external packages (the standard ones are
  'python', 'cmd', and 'connect').

2.5.3 - 2020-04-30
------------------

- [FIX] Constrain simpy version to <4.0.0 due to simpy.io incompatibility
- [CHANGE] Updated Odysseus tutorial
- [CHANGE] Eliminated shifted_cache which reduces memory consumption

2.5.2 - 2019-11-01
------------------

- [NEW] Special characters are now allowed in path names
- [NEW] Compatible to the new versions of networkx
- [CHANGE] python 3.6, 3.7 and 3.8 are currently supported, python 3.4 and 3.5 not anymore.
- [FIX] Various minor internal changes
- [FIX] Various documentation updates and fixes

2.5.1 - 2018-11-29
------------------

- [NEW] When calling the world.start() command for a simulator, users can now set a predefined
  value for the posix flag (e.g. True) to prevent automatic detection of the operating system.
  This facilitates the creation of some co-simulation cases across OS (e.g. Windows and Linux).

2.5.0 - 2018-09-05
------------------

- [NEW] Connection option "time_shifted" added as alternative to async_requests. This will
  make creating cyclic data dependencies between simulators more usable since usage of
  set_data with an API implementation will no longer be needed.

2.4.0 - 2017-12-06
------------------

- [NEW] Compatible to the new versions of networkx, simpy and simpy.io
- [CHANGE] python 3.4, 3.5 and 3.6 are currently supported python 3.3 is no longer supported
- [FIX] Various bug fixes

2.3.0 - 2016-04-26
------------------

- [NEW] Allow passing environment vars to sup processes
- [FIX] Fixed a bug in the version validation which raised an error when using
  a floating point for the version

2.2.0 - 2016-02-15
------------------

- [NEW] API version 2.2: Added an optional "setup_done()" method.

- [CHANGE] API version validation: The API version is no longer an integer but
  a "major.minor" string.  The *major* part has to match with mosaik's major
  version. The *minor* part may be lower or equal to mosaik's minor version.

- [FIX] Various minor fixes and stability improvements.

- [FIX] Various documentation updates and fixes.

2.1.2 – 2014-10-29
------------------

- [FIX] ``World.shutdown()`` now checks if the socket still exists before
  attempting to close it.

- [FIX] Fixed a bug that made the last extra method of a simulator shadow all
  previous ones.

2.1.1 – 2014-10-28
------------------

- [NEW] ``World.run()`` now prints a warning if you forget to connect
  a simulator's entities.
- [FIX] Fixed some problems with the data-flow cache.

2.1 – 2014-10-24
----------------

- [NEW] Mosaik can now perform real-time simulations. Before, this
  functionality needed to be implemented by simulators. Now it’s just
  ``World.run(until=x, rt_factor=y)``, where ``rt_factor`` defines the
  simulation speed relative to the wall-clock time (issue #24).

- [NEW] Simulators can now expose extra methods via their API that can be
  called from a mosaik scenario. This allows you to, e.g., store static data in
  a data base. These extra API methods need to be specified in the simulator’s
  meta data (issue #26).

- [NEW] ``util.connect_many_to_one()`` helper function.

- [NEW] More and better documentation:

  - Tutorial for integrating simulators, control strategies and for creating
    scenarios.

  - Sim API description

  - Scenario API description

  - Sim Manager documentation

  - Scheduler documentation

  - Discussion of design decisions

  - Logo, colors, CI

- [NEW] Added ``util.sync_call()`` which eases calling proxied methods of
  a simulator synchronously.

- [CHANGE] The *rel* attribute in the entity description returned by *create()*
  is now optional.

- [CHANGE] Moved proxied methods from ``SimProxy`` to ``SimProxy.proxy`` in
  order to avoid potential name clashes with other attributes.

- [CHANGE] Check a simulator’s models and extra API methods for potential name
  clashes with the built-in API methods.

- [CHANGE] The argument *execution_graph* of ``World`` was renamed to *debug*.
  The execution graph now also stores the time after a simulation step (in
  addition to the time before the step).

- [FIX] issue #22: The asynchronous requests *get_data()* and *set_data()*
  now check if the ``async_requests`` flag was set in ``World.connect()``.

- [FIX] issue #23: *finalize()* is now called for in-process Python
  simulators.

- [FIX] issue #27: Dramatically improved simulation performance (30 times as
  fast in some cases) if simulators use different step sizes (e.g. 1 minute and
  1 hour) by improving some internal data structures.


2.0 – 2014-09-22
----------------

- Mosaik 2 is a complete rewrite of mosaik 1 in order to improve its
  maintainability and flexibility.

- Removed features:

  - The *mosl* DSL (including Eclipse xtext and Java) are now gone. Mosaik now
    only uses Python.

  - Mosaik now longer has executables but is now used as a library.

  - The platform manager is gone.

  - The database is now a separate package, see `mosaik-hdf5`__.

  - The old web UI is gone.

- Mosaik now consists of four core components with the following feature sets:

  - mosaik Sim API

    - The API has bean cleaned up and simplified.

    - Simulators and control strategies share the same API.

    - There are only four calls from mosaik to a simulator: *init*, *create*,
      *step* and *get_data*.

    - Simulators / processes can make asynchronous requests to mosaik during a
      step: *get_progress*, *get_related_entities*, *get_data*, *set_data*.

    - ZeroMQ with JSON is replaced by plain network sockets with JSON.

  - Scenarios:

    - Pure Python is now used to describe scenarios. This offers you more
      flexibility to create complex scenarios.

    - Scenario creation simplified: Start a simulator to get a model factory.
      Use the factory to create model instances (*entities*). Connect entities.
      Run simulation.

    - Connection rules are are no based on a primitive *connect* function that
      only connects two entities with each other. On top of that, any
      connection strategy can be implemented.

  - Simulation Manager:

    - Simulators written in Python 3 can be executed *in process*.

    - Simulators can be started as external processes.

    - Mosaik can connect to an already running instance of a simulator. This
      can be used as a replacement for the now gone platform manager.

  - Simulation execution:

    - The simulation is now event-based. No schedule and no synchronization
      points need to be computed.

    - Simulators can have different and varying step sizes.

- Mosaik ecosystem:

  - A high-level implementation of the mosaik 2 API currently exists for
    Python__ and Java__.

  - *mosaik-web* is a simple visualization for mosaik simulations. See
    https://gitlab.com/mosaik/mosaik-web.

  - *mosaik-pypower* is an adapter for the *PYPOWER* load flow analysis
    library. See https://gitlab.com/mosaik/mosaik-pypower and
    https://github.com/rwl/PYPOWER.

  - *mosaik-csv* and *mosaik-householdsim* are simple demo simulators that you
    can use to "simulate" CSV data sets and load-profile based households. See
    https://gitlab.com/mosaik/mosaik-csv and
    https://gitlab.com/mosaik/mosaik-householdsim.

  - There is a repository containing a simple demo scenario for mosaik. See
    https://gitlab.com/mosaik/mosaik-demo.

__ https://gitlab.com/mosaik/mosaik-hdf5
__ https://gitlab.com/mosaik/mosaik-api-python
__ https://gitlab.com/mosaik/mosaik-api-java

2.0a4 – 2014-07-31
------------------

- [NEW] The model meta data may now contain the ``any_inputs`` which, if set
  to ``True``, allows any attribute to be connected to that model (useful for
  databases and alike).
- [CHANGE] The dictionary of input values in the API's ``step()`` call now
  also contains the source of a particular value. This is also usefull to for
  databases. This may break existing simulators.
- [CHANGE] "." is now used as separator in full entiy IDs instead of "/"
  (issue #19).


2.0a3 – 2014-06-26
------------------

- [NEW] Hierarchical entities: Entities can now have a list of child entities
  (issue #14).
- [NEW] The ``World`` class now has a ``get_data()`` method that allows you to
  get data from entities while creating a scenario.
- [NEW] ``World.connect(a, b, ('X', 'X'))`` can now be simplified to
  ``World.connect(a, b, 'X')``.
- [NEW] Attribute ``Entity.full_id`` which uniquely identifies an entity:
  ``'<sid>/<eid>'``
- [NEW] Attribute ``ModelFactory.meta`` which is the meta data dictionary of
  a simulator.
- [NEW] ``World()`` now accepts a configuration dictionary which can, e.g.,
  specify the network address for mosaik.
- [NEW] Overview section for the docs
- [NEW] Description of the mosaik simulator API in the docs
- [CHANGE] When you create entities, mosaik checks if the model parameters
  actually exists and raises an error if not (issue #9).
- [CHANGE] The simulator API’s ``init()`` function now receives the simulator ID
  as first argument (issue #15).
- [CHANGE] The behavior of the ``get_related_entities()`` RPC that simulators
  can perform has been changed.
- [CHANGE] Various internal improvements
- [FIX] issue #18. Improved the error message if a Python simulator could
  not be imported.
- [REMOVED] Attribute ``Entity.rel``.


2.0a2 – 2014-05-05
------------------

- [NEW] Preliminary documentation and installation instructions
  (https://mosaik.readthedocs.org)

- [NEW] Simulators can now set data to other simulators using the
  asynchronous request *set_data* (issue #1).

- [NEW] There is now a start timeout for external processes (issue #11).

- [CHANGE] Mosaik now raises an error if a simulator uses the wrong API version
  (issue #4).

- [CHANGE] Mosaik prints everything to *stdout* instead of using the Python
  logging module (issue #7).

- [FIX] issue #2. Scheduling now works properly for processes using async.
  requests. New keyword argument *async_requests* for ``World.connect()``.

- [FIX] issue #3. Local (in-process) Simulators can now also perform async.
  requests to mosaik (*get_progress*, *get_related_entities*, *get_data*,
  *set_data*).

- [FIX] issue #8. Cleaned up the code a bit.

- [FIX] issue #10. Tests for the sim manager improved.


2.0a1 – 2014-03-26
------------------

- Mosaik 2 is a complete rewrite of mosaik 1 in order to improve its
  maintainability and flexibility. It is still an early alpha version and
  neither feature complete nor bug free.

- Removed features:

  - The *mosl* DSL (including Eclipse xtext and Java) are now gone. Mosaik now
    only uses Python.

  - Mosaik now longer has executables but is now used as a library.

  - The platform manager is gone.

  - Mosaik no longer includes a database.

  - Mosaik no longer includes a web UI.

- Mosaik now consists of four core components with the following feature sets:

  - simulator API

    - The API has bean cleaned up and simplified.

    - Simulators and control strategies share the same API.

    - There are only four calls from mosaik to a simulator: *init*, *create*,
      *step* and *get_data*.

    - Simulators / processes can make asynchronous requests to mosaik during a
      step: *get_progress*, *get_related_entities*, *get_data*.

    - ZeroMQ with JSON is replaced by plain network sockets with JSON.

  - Scenarios:

    - Pure Python is now used to describe scenarios. This offers you more
      flexibility to create complex scenarios.

    - Scenario creation simplified: Start a simulator to get a model factory.
      Use the factory to create model instances (*entities*). Connect entities.
      Run simulation.

    - Connection rules are are no based on a primitive *connect* function that
      only connects two entities with each other. On top of that, any
      connection strategy can be implemented.

  - Simulation Manager:

    - Simulators written in Python 3 can be executed *in process*.

    - Simulators can be started as external processes.

    - Mosaik can connect to an already running instance of a simulator. This
      can be used as a replacement for the now gone platform manager.

  - Simulation execution:

    - The simulation is now event-based. No schedule and no synchronization
      points need to be computed.

    - Simulators can have different and varying step sizes.

- Mosaik ecosystem:

  - A high-level implementation of the mosaik 2 API currently only exists for
    Python. See https://gitlab.com/mosaik/mosaik-api-python.

  - *mosaik-web* is a simple visualization for mosaik simulations. See
    https://gitlab.com/mosaik/mosaik-web.

  - *mosaik-pypower* is an adapter for the *PYPOWER* load flow analysis
    library. See https://gitlab.com/mosaik/mosaik-pypower and
    https://github.com/rwl/PYPOWER.

  - *mosaik-csv* and *mosaik-householdsim* are simple demo simulators that you
    can use to "simulate" CSV data sets and load-profile based households. See
    https://gitlab.com/mosaik/mosaik-csv and
    https://gitlab.com/mosaik/mosaik-householdsim.

  - There is a repository containing a simple demo scenario for mosaik. See
    https://gitlab.com/mosaik/mosaik-demo.


1.1 – 2013-10-25
----------------

- [NEW] New API for control strategies.
- [NEW] Mosaik can be configured via environment variables.
- [NEW] Various changes and improvements implemented during Steffen’s
  dissertation.


1.0 – 2013-01-25
----------------

Mosaik 1 was nearly a complete rewrite of the previous version and already
incorporated many of the concepts and features described in Steffen Schütte's
`Phd thesis`__.

It used *mosl*, a DSL implemented with Eclipse and xtext, to describe
simulators and scenarios. Interprocess communication was done with ZeroMQ and
JSON encoded messages.

__ http://www.informatik.uni-oldenburg.de/download/Promotionen/dissertation_schuette_08012014.pdf


0.5 – 2011-08-22
----------------

This was the first actual version of mosaik that actually worked. However, the
simulators we were using at that time were hard coded into the simulation loop
and we used XML-RPC to communicate with the simulators.


Authors
=======

The original concepts for mosaik were developed by Steffen Schütte and Stefan
Scherfke.

The author of mosaik version 2 is Stefan Scherfke.

Current and former members of the mosaik team: Sharaf Alsharif, Tobias Brandt, Reef Eilers, André El-Ama,
Bengt Lüers, Okko Nannen, Annika Ofenloch, Mostafa Ramezani, Thomas Raub,
Stefan Scherfke, Florian Schloegl, Eike Schulte, Steffen Schütte, Jan Sören Schwarz,
Cornelius Steinbrink, Malte Stomberg, Deborah Tolk
